name: Deploy Gatsby site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Detect package manager (Yarn or npm)
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      # Step 3: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"  # Change to "18" if you face compatibility issues
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      # Step 4: Setup Gatsby configuration (optional path prefix injection)
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: gatsby

      # Step 5: Restore Gatsby cache for faster builds
      - name: Restore Gatsby cache
        uses: actions/cache@v4
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-gatsby-build-${{ hashFiles('package-lock.json', 'yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-gatsby-build-

      # Step 6: Install dependencies (npm or yarn based on detection)
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      # Step 7: Build the Gatsby site
      - name: Build Gatsby site
        env:
          PREFIX_PATHS: 'true'  # Remove if not using path prefixes
        run: ${{ steps.detect-package-manager.outputs.manager }} run build

      # Step 8: Upload the public folder (build output)
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 9: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
